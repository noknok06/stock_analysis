    # .env.example
# 株式分析記録アプリ（フェーズ2）環境変数設定例

# ==============================================================================
# 基本設定
# ==============================================================================

# Django設定
SECRET_KEY='django-insecure-*ii+)(orvyg$yfcua0r6jm&@&v=&le7z@p3&+35oid99#k#yn('
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,your-domain.com

# ==============================================================================
# データベース設定
# ==============================================================================

# 開発環境（SQLite）
DB_ENGINE=django.db.backends.sqlite3
DB_NAME=db.sqlite3

# 本番環境（PostgreSQL）
# DB_ENGINE=django.db.backends.postgresql
# DB_NAME=stock_analysis_db
# DB_USER=stock_analysis_user
# DB_PASSWORD=your-db-password
# DB_HOST=localhost
# DB_PORT=5432

# 本番環境（MySQL）
# DB_ENGINE=django.db.backends.mysql
# DB_NAME=stock_analysis_db
# DB_USER=stock_analysis_user
# DB_PASSWORD=your-db-password
# DB_HOST=localhost
# DB_PORT=3306

# ==============================================================================
# AI機能設定
# ==============================================================================

# AI機能の有効/無効
AI_ENABLED=True
AI_AUTO_ANALYSIS=True
AI_AUTO_TAGGING=True
AI_SEMANTIC_SEARCH=True
AI_RELATED_CONTENT=True

# AI分析設定
AI_MIN_CONTENT_LENGTH=20
AI_MAX_SUGGESTED_TAGS=6
AI_MAX_RELATED_CONTENT=5
AI_CACHE_TIMEOUT=3600
AI_ANALYSIS_EXPIRY_DAYS=30

# セマンティック検索設定
SEMANTIC_SIMILARITY_THRESHOLD=0.1
SEMANTIC_MAX_RESULTS=20
SEMANTIC_RELEVANCE_WEIGHT=0.7
SEMANTIC_FRESHNESS_WEIGHT=0.3

# バッチ処理設定
BATCH_DEFAULT_SIZE=100
BATCH_MAX_SIZE=1000
BATCH_TIMEOUT=300

# AI パフォーマンス設定
AI_PARALLEL_ANALYSIS=False
AI_ANALYSIS_QUEUE=ai_analysis
AI_MAX_ANALYSIS_TIME=60
AI_BATCH_SIZE=10

# ==============================================================================
# キャッシュ設定
# ==============================================================================

# ローカルメモリキャッシュ（開発環境）
CACHE_BACKEND=django.core.cache.backends.locmem.LocMemCache
CACHE_LOCATION=ai-analysis-cache
CACHE_MAX_ENTRIES=1000
CACHE_CULL_FREQUENCY=3

# Redis キャッシュ（本番環境）
# REDIS_URL=redis://localhost:6379/1
# CACHE_BACKEND=django_redis.cache.RedisCache

# ==============================================================================
# セキュリティ設定
# ==============================================================================

# CSRF & Session設定
CSRF_COOKIE_SECURE=False
SESSION_COOKIE_SECURE=False
SESSION_COOKIE_AGE=86400

# HTTPS設定（本番環境のみ）
SECURE_SSL_REDIRECT=False
SECURE_HSTS_SECONDS=31536000

# ==============================================================================
# CORS設定
# ==============================================================================

CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000

# ==============================================================================
# メール設定
# ==============================================================================

# 開発環境（コンソール出力）
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# 本番環境（Gmail SMTP）
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=True
# EMAIL_HOST_USER=your-email@gmail.com
# EMAIL_HOST_PASSWORD=your-app-password
# DEFAULT_FROM_EMAIL=your-email@gmail.com

# 管理者メール
ADMIN_EMAIL=admin@example.com

# ==============================================================================
# ファイルアップロード設定
# ==============================================================================

FILE_UPLOAD_MAX_MEMORY_SIZE=2621440
DATA_UPLOAD_MAX_MEMORY_SIZE=2621440
DATA_UPLOAD_MAX_NUMBER_FIELDS=1000

# ==============================================================================
# Celery設定（非同期処理）
# ==============================================================================

CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ==============================================================================
# 開発ツール設定
# ==============================================================================

# Debug Toolbar
ENABLE_DEBUG_TOOLBAR=True

# ページネーション
PAGINATE_BY=20

# ==============================================================================
# 外部API設定（将来の拡張用）
# ==============================================================================

# 株価データAPI
# STOCK_API_KEY=your-stock-api-key
# STOCK_API_URL=https://api.example.com/v1/

# ニュースAPI
# NEWS_API_KEY=your-news-api-key
# NEWS_API_URL=https://newsapi.org/v2/

# ==============================================================================
# ログ設定
# ==============================================================================

# ログレベル設定
LOG_LEVEL=INFO

# ==============================================================================
# 本番環境追加設定
# ==============================================================================

# 静的ファイル設定（本番環境）
# STATIC_ROOT=/var/www/stock_analysis/static/
# MEDIA_ROOT=/var/www/stock_analysis/media/

# ドメイン設定
# SITE_DOMAIN=your-domain.com
# SITE_NAME=Stock Analysis App

# Sentry（エラー監視）
# SENTRY_DSN=your-sentry-dsn-here

# AWS S3設定（本番環境でのファイルストレージ）
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_STORAGE_BUCKET_NAME=your-s3-bucket-name
# AWS_S3_REGION_NAME=ap-northeast-1

# ==============================================================================
# 使用方法
# ==============================================================================

# 1. このファイルを .env にコピー
# cp .env.example .env

# 2. 必要な設定値を編集
# nano .env

# 3. 仮想環境を有効化
# source venv/bin/activate

# 4. 依存関係をインストール
# pip install -r requirements.txt

# 5. データベースマイグレーション
# python manage.py migrate

# 6. スーパーユーザー作成
# python manage.py createsuperuser

# 7. 開発サーバー起動
# python manage.py runserver

# 8. AI分析の初期化（オプション）
# python manage.py run_ai_analysis --dry-run